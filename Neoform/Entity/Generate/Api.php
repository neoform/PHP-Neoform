<?php

    namespace Neoform\Entity\Generate;

    use Neoform\Entity\Generate;
    use Neoform\Sql\Parser;

    class Api extends Generate {

        public function validate_insert() {

            $this->code .= "\t\t/**\n";
            $this->code .= "\t\t * Validates info to for insert\n";
            $this->code .= "\t\t *\n";
            $this->code .= "\t\t * @param Input\\Collection \$Input\n";
            $this->code .= "\t\t */\n";

            $this->code .= "\t\tpublic static function _validate_insert(Input\\Collection \$input) {\n\n";
            foreach ($this->table->fields as $field) {
                if ($field->is_auto_increment()) {
                    // if its auto increment, there's no reason to be setting the field.
                    continue;
                }

                $this->code .= "\t\t\t// {$field->name}\n";
                $this->code .= "\t\t\t\$input->{$field->name}->cast('{$field->casting}')";

                if ($field->allows_null() || $field->is_autogenerated_on_insert()) {
                    $this->code .= "->optional()";
                }

                $this->code .= Parser::driver_specific_api_validation($field);

                //unique
                if ($field->is_unique()) {
                    $this->code .= "->callback(function(\${$field->name}) {\n";
                    // record() is a different function, it returns an array with entity info, not it's id only
                    if ($field->is_primary_key()) {
                        $this->code .= "\t\t\t\tif (Entity::dao('" . str_replace('_', '\\', $this->table->name) . "')->record(\${$field->name}->val())) {\n";
                    } else {
                        $this->code .= "\t\t\t\tif (Entity::dao('" . str_replace('_', '\\', $this->table->name) . "')->by_{$field->name_idless}(\${$field->name}->val())) {\n";
                    }
                    $this->code .= "\t\t\t\t\t\${$field->name}->errors('already in use');\n";
                    $this->code .= "\t\t\t\t}\n";
                    $this->code .= "\t\t\t})";
                }

                // references = check if object exists
                if ($field->referenced_field) {
                    $this->fk($field);
                }

                $this->code .= ";\n\n";
            }
            $this->code = substr($this->code, 0, -1);
            $this->code .= "\t\t}\n\n";
        }

        public function validate_update() {

            $pk = $this->table->primary_key;

            $this->code .= "\t\t/**\n";
            $this->code .= "\t\t * Validates info to update a " . ucwords(str_replace('_', ' ', $this->table->name)) . " model\n";
            $this->code .= "\t\t *\n";
            $this->code .= "\t\t * @param model \${$this->table->name}\n";
            $this->code .= "\t\t * @param Input\\Collection \$Input\n";
            $this->code .= "\t\t */\n";

            $this->code .= "\t\tpublic static function _validate_update(Model \${$this->table->name}, Input\\Collection \$input) {\n\n";
            foreach ($this->table->fields as $field) {
                if ($field->is_auto_increment()) {
                    // if its auto increment, there's no reason to be setting the field.
                    continue;
                }

                $this->code .= "\t\t\t// " . $field->name . "\n";
                $this->code .= "\t\t\t\$input->" . $field->name . "->cast('" . $field->casting . "')";

                // Make everything optional since its an update.
                $this->code .= "->optional(" . ($field->allows_null() ? 'true' : 'false') . ")";

                $this->code .= Parser::driver_specific_api_validation($field);

                //unique
                if ($field->is_unique()) {
                    $this->code .= "->callback(function(\${$field->name}) use (\${$this->table->name}) {\n";
                    // record() is a different function, it returns an array with entity info, not it's id only
                    if ($field->is_primary_key()) {
                        $this->code .= "\t\t\t\t\${$this->table->name}_info = Entity::dao('" . str_replace('_', '\\', $this->table->name) . "')->record(\${$field->name}->val());\n";
                        $this->code .= "\t\t\t\tif (\${$this->table->name}_info && ({$pk->casting}) \${$this->table->name}_info['{$pk->name}'] !== \${$this->table->name}->{$pk->name}) {\n";
                    } else {
                        $this->code .= "\t\t\t\t\${$pk->name}_arr = Entity::dao('" . str_replace('_', '\\', $this->table->name) . "')->by_{$field->name_idless}(\${$field->name}->val());\n";
                        $this->code .= "\t\t\t\tif (is_array(\${$pk->name}_arr) && \${$pk->name}_arr && ({$pk->casting}) current(\${$pk->name}_arr) !== \${$this->table->name}->{$pk->name}) {\n";
                    }
                    $this->code .= "\t\t\t\t\t\${$field->name}->errors('already in use');\n";
                    $this->code .= "\t\t\t\t}\n";
                    $this->code .= "\t\t\t})";
                }

                // references = check if object exists
                if ($field->referenced_field) {
                    $this->fk($field);
                }


                $this->code .= ";\n\n";
            }
            $this->code = substr($this->code, 0, -1);
            $this->code .= "\t\t}\n\n";
        }

        public function create() {

            $longest = $this->table->longest_field_length();

            $this->code .= "\t\t/**\n";
            $this->code .= "\t\t * Creates a " . ucwords(str_replace('_', ' ', $this->table->name)) . " model with \$info\n";
            $this->code .= "\t\t *\n";
            $this->code .= "\t\t * @param array \$info\n";
            $this->code .= "\t\t *\n";
            $this->code .= "\t\t * @return model\n";
            $this->code .= "\t\t * @throws Input\\Exception\n";
            $this->code .= "\t\t */\n";

            $this->code .= "\t\tpublic static function insert(array \$info) {\n\n";
            $this->code .= "\t\t\t\$input = new Input\\Collection(\$info);\n\n";
            $this->code .= "\t\t\tself::_validate_insert(\$input);\n\n";
            $this->code .= "\t\t\tif (\$input->is_valid()) {\n";
            $this->code .= "\t\t\t\treturn Entity::dao('" . str_replace('_', '\\', $this->table->name) . "')->insert([\n";

            foreach ($this->table->fields as $field) {
                if ($field->is_auto_increment()) {
                    // if its auto increment, there's no reason to be setting the field.
                    continue;
                }

                $this->code .= "\t\t\t\t\t'" . str_pad($field->name . "'", $longest +1) . " => \$input->{$field->name}->val(),\n";
            }

            $this->code .= "\t\t\t\t]);\n";
            $this->code .= "\t\t\t}\n";
            $this->code .= "\t\t\tthrow \$input->exception();\n";
            $this->code .= "\t\t}\n\n";
        }

        public function update() {

            $this->code .= "\t\t/**\n";
            $this->code .= "\t\t * Update a " . ucwords(str_replace('_', ' ', $this->table->name)) . " model with \$info\n";
            $this->code .= "\t\t *\n";
            $this->code .= "\t\t * @param model \${$this->table->name}\n";
            $this->code .= "\t\t * @param array \$info\n";
            $this->code .= "\t\t * @param bool  \$crush\n";
            $this->code .= "\t\t *\n";
            $this->code .= "\t\t * @return model\n";
            $this->code .= "\t\t * @throws Input\\Exception\n";
            $this->code .= "\t\t */\n";

            $this->code .= "\t\tpublic static function update(Model \${$this->table->name}, array \$info, \$crush=false) {\n\n";
            $this->code .= "\t\t\t\$input = new Input\\Collection(\$info);\n\n";

            $this->code .= "\t\t\tself::_validate_update(\${$this->table->name}, \$input);\n\n";

            $this->code .= "\t\t\tif (\$input->is_valid()) {\n";
            $this->code .= "\t\t\t\treturn Entity::dao('" . str_replace('_', '\\', $this->table->name) . "')->update(\n";
            $this->code .= "\t\t\t\t\t\${$this->table->name},\n";
            $this->code .= "\t\t\t\t\t\$input->vals(\n";
            $this->code .= "\t\t\t\t\t\t[\n";

            foreach ($this->table->fields as $field) {
                if ($field->is_auto_increment()) {
                    // if its auto increment, there's no reason to be setting the field.
                    continue;
                }

                $this->code .= "\t\t\t\t\t\t\t'{$field->name}',\n";
            }

            $this->code .= "\t\t\t\t\t\t],\n";
            $this->code .= "\t\t\t\t\t\t\$crush\n";
            $this->code .= "\t\t\t\t\t)\n";
            $this->code .= "\t\t\t\t);\n";
            $this->code .= "\t\t\t}\n";

            $this->code .= "\t\t\tthrow \$input->exception();\n";
            $this->code .= "\t\t}\n\n";
        }

        protected function fk(Parser\Field $field) {
            $this->code .= "->callback(function(\${$field->name}) {\n";
            if ($field->allows_null()) {
                $this->code .= "\t\t\t\tif (\${$field->name}->val()) {\n";
                $this->code .= "\t\t\t\t\ttry {\n";
                $this->code .= "\t\t\t\t\t\t\${$field->name}->data('model', new \\Neoform\\" . str_replace('_', '\\', $field->referenced_field->table->name) . "\\Model(\${$field->name}->val()));\n";
                $this->code .= "\t\t\t\t\t} catch (\\Neoform\\" . str_replace('_', '\\', $field->referenced_field->table->name) . "\\Exception \$e) {\n";
                $this->code .= "\t\t\t\t\t\t\${$field->name}->errors(\$e->getMessage());\n";
                $this->code .= "\t\t\t\t\t}\n";
            } else {
                $this->code .= "\t\t\t\ttry {\n";
                $this->code .= "\t\t\t\t\t\${$field->name}->data('model', new \\Neoform\\" . str_replace('_', '\\', $field->referenced_field->table->name) . "\\Model(\${$field->name}->val()));\n";
                $this->code .= "\t\t\t\t} catch (\\Neoform\\" . str_replace('_', '\\', $field->referenced_field->table->name) . "\\Exception \$e) {\n";
                $this->code .= "\t\t\t\t\t\${$field->name}->errors(\$e->getMessage());\n";
            }
            $this->code .= "\t\t\t\t}\n";
            $this->code .= "\t\t\t})";
        }
    }
